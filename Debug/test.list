
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003d8c  08003d8c  00004d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df0  08003df0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003df0  08003df0  00004df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003df8  08003df8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df8  08003df8  00004df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dfc  08003dfc  00004dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e00  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000005c  08003e5c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003e5c  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6ae  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aba  00000000  00000000  0001073a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000121f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ca  00000000  00000000  00012e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165cd  00000000  00000000  00013842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee8d  00000000  00000000  00029e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d6cf  00000000  00000000  00038c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c636b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b40  00000000  00000000  000c63b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000c9ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d74 	.word	0x08003d74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003d74 	.word	0x08003d74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // Adresse I2C = 0x27 << 1

I2C_HandleTypeDef *_lcd_i2c;

void lcd_send_cmd(char cmd) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  uint8_t data_t[4];

  data_u = (cmd & 0xf0);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f023 030f 	bic.w	r3, r3, #15
 8000d5c:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd << 4) & 0xf0);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u | 0x0C;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	f043 030c 	orr.w	r3, r3, #12
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u | 0x08;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l | 0x0C;
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	f043 030c 	orr.w	r3, r3, #12
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l | 0x08;
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	72fb      	strb	r3, [r7, #11]

  HAL_I2C_Master_Transmit(_lcd_i2c, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <lcd_send_cmd+0x5c>)
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	f107 0208 	add.w	r2, r7, #8
 8000d94:	2364      	movs	r3, #100	@ 0x64
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2304      	movs	r3, #4
 8000d9a:	214e      	movs	r1, #78	@ 0x4e
 8000d9c:	f001 f866 	bl	8001e6c <HAL_I2C_Master_Transmit>
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000078 	.word	0x20000078

08000dac <lcd_send_data>:

void lcd_send_data(char data) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  uint8_t data_t[4];

  data_u = (data & 0xf0);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f023 030f 	bic.w	r3, r3, #15
 8000dbc:	73fb      	strb	r3, [r7, #15]
  data_l = ((data << 4) & 0xf0);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u | 0x0D;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f043 030d 	orr.w	r3, r3, #13
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u | 0x09;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f043 0309 	orr.w	r3, r3, #9
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l | 0x0D;
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	f043 030d 	orr.w	r3, r3, #13
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l | 0x09;
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	f043 0309 	orr.w	r3, r3, #9
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	72fb      	strb	r3, [r7, #11]

  HAL_I2C_Master_Transmit(_lcd_i2c, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <lcd_send_data+0x5c>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	f107 0208 	add.w	r2, r7, #8
 8000df4:	2364      	movs	r3, #100	@ 0x64
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2304      	movs	r3, #4
 8000dfa:	214e      	movs	r1, #78	@ 0x4e
 8000dfc:	f001 f836 	bl	8001e6c <HAL_I2C_Master_Transmit>
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000078 	.word	0x20000078

08000e0c <lcd_clear>:

void lcd_clear(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff ff9b 	bl	8000d4c <lcd_send_cmd>
  HAL_Delay(2);
 8000e16:	2002      	movs	r0, #2
 8000e18:	f000 fc24 	bl	8001664 <HAL_Delay>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <lcd_put_cursor>:

void lcd_put_cursor(uint8_t row, uint8_t col) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
  switch (row) {
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d002      	beq.n	8000e3c <lcd_put_cursor+0x1c>
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d007      	beq.n	8000e4a <lcd_put_cursor+0x2a>
      break;
    case 1:
      lcd_send_cmd(0xC0 + col);
      break;
  }
}
 8000e3a:	e00d      	b.n	8000e58 <lcd_put_cursor+0x38>
      lcd_send_cmd(0x80 + col);
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	3b80      	subs	r3, #128	@ 0x80
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff82 	bl	8000d4c <lcd_send_cmd>
      break;
 8000e48:	e006      	b.n	8000e58 <lcd_put_cursor+0x38>
      lcd_send_cmd(0xC0 + col);
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	3b40      	subs	r3, #64	@ 0x40
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff7b 	bl	8000d4c <lcd_send_cmd>
      break;
 8000e56:	bf00      	nop
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  while (*str) lcd_send_data(*str++);
 8000e68:	e006      	b.n	8000e78 <lcd_send_string+0x18>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff9a 	bl	8000dac <lcd_send_data>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f4      	bne.n	8000e6a <lcd_send_string+0xa>
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <lcd_init>:

void lcd_init(I2C_HandleTypeDef *hi2c) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  _lcd_i2c = hi2c;
 8000e94:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <lcd_init+0x6c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]

  HAL_Delay(50);
 8000e9a:	2032      	movs	r0, #50	@ 0x32
 8000e9c:	f000 fbe2 	bl	8001664 <HAL_Delay>
  lcd_send_cmd(0x30);
 8000ea0:	2030      	movs	r0, #48	@ 0x30
 8000ea2:	f7ff ff53 	bl	8000d4c <lcd_send_cmd>
  HAL_Delay(5);
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f000 fbdc 	bl	8001664 <HAL_Delay>
  lcd_send_cmd(0x30);
 8000eac:	2030      	movs	r0, #48	@ 0x30
 8000eae:	f7ff ff4d 	bl	8000d4c <lcd_send_cmd>
  HAL_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 fbd6 	bl	8001664 <HAL_Delay>
  lcd_send_cmd(0x30);
 8000eb8:	2030      	movs	r0, #48	@ 0x30
 8000eba:	f7ff ff47 	bl	8000d4c <lcd_send_cmd>
  HAL_Delay(10);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f000 fbd0 	bl	8001664 <HAL_Delay>
  lcd_send_cmd(0x20);  // 4 bit mode
 8000ec4:	2020      	movs	r0, #32
 8000ec6:	f7ff ff41 	bl	8000d4c <lcd_send_cmd>

  lcd_send_cmd(0x28);  // 2 lines, 5x7 matrix
 8000eca:	2028      	movs	r0, #40	@ 0x28
 8000ecc:	f7ff ff3e 	bl	8000d4c <lcd_send_cmd>
  lcd_send_cmd(0x08);  // display off
 8000ed0:	2008      	movs	r0, #8
 8000ed2:	f7ff ff3b 	bl	8000d4c <lcd_send_cmd>
  lcd_send_cmd(0x01);  // clear display
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff ff38 	bl	8000d4c <lcd_send_cmd>
  HAL_Delay(2);
 8000edc:	2002      	movs	r0, #2
 8000ede:	f000 fbc1 	bl	8001664 <HAL_Delay>
  lcd_send_cmd(0x06);  // entry mode
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f7ff ff32 	bl	8000d4c <lcd_send_cmd>
  lcd_send_cmd(0x0C);  // display on, cursor off
 8000ee8:	200c      	movs	r0, #12
 8000eea:	f7ff ff2f 	bl	8000d4c <lcd_send_cmd>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000078 	.word	0x20000078
 8000efc:	00000000 	.word	0x00000000

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fb3b 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f8b7 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 f99d 	bl	800124c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f12:	f000 f94b 	bl	80011ac <MX_TIM1_Init>
  MX_I2C1_Init();
 8000f16:	f000 f91b 	bl	8001150 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f1a:	484f      	ldr	r0, [pc, #316]	@ (8001058 <main+0x158>)
 8000f1c:	f001 ffd4 	bl	8002ec8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f26:	484d      	ldr	r0, [pc, #308]	@ (800105c <main+0x15c>)
 8000f28:	f000 fe42 	bl	8001bb0 <HAL_GPIO_WritePin>
  lcd_init(&hi2c1);  // adapte si tu utilises hi2c2
 8000f2c:	484c      	ldr	r0, [pc, #304]	@ (8001060 <main+0x160>)
 8000f2e:	f7ff ffad 	bl	8000e8c <lcd_init>
  lcd_clear();
 8000f32:	f7ff ff6b 	bl	8000e0c <lcd_clear>
  lcd_put_cursor(0, 0);
 8000f36:	2100      	movs	r1, #0
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff ff71 	bl	8000e20 <lcd_put_cursor>
  lcd_send_string("Distance:");
 8000f3e:	4849      	ldr	r0, [pc, #292]	@ (8001064 <main+0x164>)
 8000f40:	f7ff ff8e 	bl	8000e60 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char buffer[16];
	  sprintf(buffer, "Dist: %d cm", Distance);
 8000f44:	4b48      	ldr	r3, [pc, #288]	@ (8001068 <main+0x168>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4947      	ldr	r1, [pc, #284]	@ (800106c <main+0x16c>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fa70 	bl	8003434 <siprintf>
	  lcd_put_cursor(0, 0);
 8000f54:	2100      	movs	r1, #0
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ff62 	bl	8000e20 <lcd_put_cursor>
	  lcd_send_string(buffer);
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff7e 	bl	8000e60 <lcd_send_string>


  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f6a:	483c      	ldr	r0, [pc, #240]	@ (800105c <main+0x15c>)
 8000f6c:	f000 fe20 	bl	8001bb0 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f70:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <main+0x158>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000f78:	bf00      	nop
 8000f7a:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <main+0x158>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	d9fa      	bls.n	8000f7a <main+0x7a>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f8a:	4834      	ldr	r0, [pc, #208]	@ (800105c <main+0x15c>)
 8000f8c:	f000 fe10 	bl	8001bb0 <HAL_GPIO_WritePin>

  pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000f90:	f000 fb5c 	bl	800164c <HAL_GetTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a36      	ldr	r2, [pc, #216]	@ (8001070 <main+0x170>)
 8000f98:	6013      	str	r3, [r2, #0]
  // wait for the echo pin to go high
  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000f9a:	bf00      	nop
 8000f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa0:	482e      	ldr	r0, [pc, #184]	@ (800105c <main+0x15c>)
 8000fa2:	f000 fded 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d108      	bne.n	8000fbe <main+0xbe>
 8000fac:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <main+0x170>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f103 040a 	add.w	r4, r3, #10
 8000fb4:	f000 fb4a 	bl	800164c <HAL_GetTick>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	429c      	cmp	r4, r3
 8000fbc:	d8ee      	bhi.n	8000f9c <main+0x9c>
  Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <main+0x158>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001074 <main+0x174>)
 8000fc6:	6013      	str	r3, [r2, #0]

  pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000fc8:	f000 fb40 	bl	800164c <HAL_GetTick>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a28      	ldr	r2, [pc, #160]	@ (8001070 <main+0x170>)
 8000fd0:	6013      	str	r3, [r2, #0]
  // wait for the echo pin to go low
  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000fd2:	bf00      	nop
 8000fd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd8:	4820      	ldr	r0, [pc, #128]	@ (800105c <main+0x15c>)
 8000fda:	f000 fdd1 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <main+0xf6>
 8000fe4:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <main+0x170>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000fec:	f000 fb2e 	bl	800164c <HAL_GetTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	429c      	cmp	r4, r3
 8000ff4:	d8ee      	bhi.n	8000fd4 <main+0xd4>
  Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <main+0x158>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <main+0x178>)
 8000ffe:	6013      	str	r3, [r2, #0]

  Distance = (Value2-Value1)* 0.034/2;
 8001000:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <main+0x178>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <main+0x174>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa7a 	bl	8000504 <__aeabi_ui2d>
 8001010:	a30f      	add	r3, pc, #60	@ (adr r3, 8001050 <main+0x150>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff faef 	bl	80005f8 <__aeabi_dmul>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800102a:	f7ff fc0f 	bl	800084c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fcf1 	bl	8000a1c <__aeabi_d2uiz>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <main+0x168>)
 8001040:	801a      	strh	r2, [r3, #0]
  HAL_Delay(50);
 8001042:	2032      	movs	r0, #50	@ 0x32
 8001044:	f000 fb0e 	bl	8001664 <HAL_Delay>
  {
 8001048:	e77c      	b.n	8000f44 <main+0x44>
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	b020c49c 	.word	0xb020c49c
 8001054:	3fa16872 	.word	0x3fa16872
 8001058:	200000d0 	.word	0x200000d0
 800105c:	40020000 	.word	0x40020000
 8001060:	2000007c 	.word	0x2000007c
 8001064:	08003d8c 	.word	0x08003d8c
 8001068:	20000124 	.word	0x20000124
 800106c:	08003d98 	.word	0x08003d98
 8001070:	20000118 	.word	0x20000118
 8001074:	2000011c 	.word	0x2000011c
 8001078:	20000120 	.word	0x20000120

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	@ 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	@ 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f002 f9f2 	bl	8003474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	4a27      	ldr	r2, [pc, #156]	@ (8001148 <SystemClock_Config+0xcc>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b0:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <SystemClock_Config+0xcc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4b22      	ldr	r3, [pc, #136]	@ (800114c <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010c8:	4a20      	ldr	r2, [pc, #128]	@ (800114c <SystemClock_Config+0xd0>)
 80010ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2310      	movs	r3, #16
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f0:	2308      	movs	r3, #8
 80010f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010f4:	2348      	movs	r3, #72	@ 0x48
 80010f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010fc:	2307      	movs	r3, #7
 80010fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fa0b 	bl	8002520 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001110:	f000 f8fc 	bl	800130c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2102      	movs	r1, #2
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fc6d 	bl	8002a10 <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800113c:	f000 f8e6 	bl	800130c <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	@ 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	@ (80011a4 <MX_I2C1_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <MX_I2C1_Init+0x50>)
 800115c:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <MX_I2C1_Init+0x58>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <MX_I2C1_Init+0x50>)
 800116e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001172:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <MX_I2C1_Init+0x50>)
 800118e:	f000 fd29 	bl	8001be4 <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 f8b8 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000007c 	.word	0x2000007c
 80011a4:	40005400 	.word	0x40005400
 80011a8:	000186a0 	.word	0x000186a0

080011ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <MX_TIM1_Init+0x98>)
 80011ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001248 <MX_TIM1_Init+0x9c>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_TIM1_Init+0x98>)
 80011d0:	2247      	movs	r2, #71	@ 0x47
 80011d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_TIM1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_TIM1_Init+0x98>)
 80011dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_TIM1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_TIM1_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_TIM1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f4:	4813      	ldr	r0, [pc, #76]	@ (8001244 <MX_TIM1_Init+0x98>)
 80011f6:	f001 fe17 	bl	8002e28 <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f884 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <MX_TIM1_Init+0x98>)
 8001212:	f001 feb3 	bl	8002f7c <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800121c:	f000 f876 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_TIM1_Init+0x98>)
 800122e:	f002 f893 	bl	8003358 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001238:	f000 f868 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000d0 	.word	0x200000d0
 8001248:	40010000 	.word	0x40010000

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a26      	ldr	r2, [pc, #152]	@ (8001304 <MX_GPIO_Init+0xb8>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a18      	ldr	r2, [pc, #96]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012bc:	4812      	ldr	r0, [pc, #72]	@ (8001308 <MX_GPIO_Init+0xbc>)
 80012be:	f000 fc77 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	480c      	ldr	r0, [pc, #48]	@ (8001308 <MX_GPIO_Init+0xbc>)
 80012d8:	f000 face 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4619      	mov	r1, r3
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_GPIO_Init+0xbc>)
 80012f6:	f000 fabf 	bl	8001878 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <Error_Handler+0x8>

08001318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <HAL_MspInit+0x4c>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <HAL_MspInit+0x4c>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001356:	2007      	movs	r0, #7
 8001358:	f000 fa5a 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	@ 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a19      	ldr	r2, [pc, #100]	@ (80013ec <HAL_I2C_MspInit+0x84>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12b      	bne.n	80013e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a6:	23c0      	movs	r3, #192	@ 0xc0
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	2312      	movs	r3, #18
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b6:	2304      	movs	r3, #4
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <HAL_I2C_MspInit+0x8c>)
 80013c2:	f000 fa59 	bl	8001878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 80013d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	@ 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40005400 	.word	0x40005400
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020400 	.word	0x40020400

080013f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <HAL_TIM_Base_MspInit+0x3c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10d      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_TIM_Base_MspInit+0x40>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <HAL_TIM_Base_MspInit+0x40>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6453      	str	r3, [r2, #68]	@ 0x44
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <HAL_TIM_Base_MspInit+0x40>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40010000 	.word	0x40010000
 8001438:	40023800 	.word	0x40023800

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <NMI_Handler+0x4>

08001444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <MemManage_Handler+0x4>

08001454 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <UsageFault_Handler+0x4>

08001464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 f8c7 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f001 ffda 	bl	8003484 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20018000 	.word	0x20018000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000128 	.word	0x20000128
 8001504:	20000278 	.word	0x20000278

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001564 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001530:	f7ff ffea 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	@ (8001578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800155a:	f001 ff99 	bl	8003490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff fccf 	bl	8000f00 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001564:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001570:	08003e00 	.word	0x08003e00
  ldr r2, =_sbss
 8001574:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001578:	20000278 	.word	0x20000278

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 f931 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff feb0 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f93b 	bl	800185e <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 f911 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	@ (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	20000008 	.word	0x20000008
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008
 8001648:	2000012c 	.word	0x2000012c

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2000012c 	.word	0x2000012c

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	@ (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	@ (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	@ 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff47 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff5c 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff8e 	bl	8001764 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffb0 	bl	80017cc <SysTick_Config>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e159      	b.n	8001b48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8148 	bne.w	8001b42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d005      	beq.n	80018ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d130      	bne.n	800192c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 0201 	and.w	r2, r3, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b03      	cmp	r3, #3
 8001936:	d017      	beq.n	8001968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d123      	bne.n	80019bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80a2 	beq.w	8001b42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b57      	ldr	r3, [pc, #348]	@ (8001b60 <HAL_GPIO_Init+0x2e8>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	4a56      	ldr	r2, [pc, #344]	@ (8001b60 <HAL_GPIO_Init+0x2e8>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0e:	4b54      	ldr	r3, [pc, #336]	@ (8001b60 <HAL_GPIO_Init+0x2e8>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1a:	4a52      	ldr	r2, [pc, #328]	@ (8001b64 <HAL_GPIO_Init+0x2ec>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a49      	ldr	r2, [pc, #292]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x202>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a48      	ldr	r2, [pc, #288]	@ (8001b6c <HAL_GPIO_Init+0x2f4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x1fe>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a47      	ldr	r2, [pc, #284]	@ (8001b70 <HAL_GPIO_Init+0x2f8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x1fa>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a46      	ldr	r2, [pc, #280]	@ (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x1f6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a45      	ldr	r2, [pc, #276]	@ (8001b78 <HAL_GPIO_Init+0x300>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x1f2>
 8001a66:	2304      	movs	r3, #4
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x204>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x204>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x204>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x204>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x204>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	@ (8001b64 <HAL_GPIO_Init+0x2ec>)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001abe:	4a2f      	ldr	r2, [pc, #188]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae8:	4a24      	ldr	r2, [pc, #144]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aee:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b12:	4a1a      	ldr	r2, [pc, #104]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	f67f aea2 	bls.w	8001894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40013c00 	.word	0x40013c00

08001b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e12b      	b.n	8001e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fbac 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2224      	movs	r2, #36	@ 0x24
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c48:	f001 f8da 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8001c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a81      	ldr	r2, [pc, #516]	@ (8001e58 <HAL_I2C_Init+0x274>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d807      	bhi.n	8001c68 <HAL_I2C_Init+0x84>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a80      	ldr	r2, [pc, #512]	@ (8001e5c <HAL_I2C_Init+0x278>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bf94      	ite	ls
 8001c60:	2301      	movls	r3, #1
 8001c62:	2300      	movhi	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	e006      	b.n	8001c76 <HAL_I2C_Init+0x92>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e60 <HAL_I2C_Init+0x27c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	bf94      	ite	ls
 8001c70:	2301      	movls	r3, #1
 8001c72:	2300      	movhi	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0e7      	b.n	8001e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4a78      	ldr	r2, [pc, #480]	@ (8001e64 <HAL_I2C_Init+0x280>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0c9b      	lsrs	r3, r3, #18
 8001c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a6a      	ldr	r2, [pc, #424]	@ (8001e58 <HAL_I2C_Init+0x274>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d802      	bhi.n	8001cb8 <HAL_I2C_Init+0xd4>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	e009      	b.n	8001ccc <HAL_I2C_Init+0xe8>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	4a69      	ldr	r2, [pc, #420]	@ (8001e68 <HAL_I2C_Init+0x284>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	3301      	adds	r3, #1
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	495c      	ldr	r1, [pc, #368]	@ (8001e58 <HAL_I2C_Init+0x274>)
 8001ce8:	428b      	cmp	r3, r1
 8001cea:	d819      	bhi.n	8001d20 <HAL_I2C_Init+0x13c>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e59      	subs	r1, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cfa:	1c59      	adds	r1, r3, #1
 8001cfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d00:	400b      	ands	r3, r1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00a      	beq.n	8001d1c <HAL_I2C_Init+0x138>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1e59      	subs	r1, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1a:	e051      	b.n	8001dc0 <HAL_I2C_Init+0x1dc>
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	e04f      	b.n	8001dc0 <HAL_I2C_Init+0x1dc>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d111      	bne.n	8001d4c <HAL_I2C_Init+0x168>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1e58      	subs	r0, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	440b      	add	r3, r1
 8001d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e012      	b.n	8001d72 <HAL_I2C_Init+0x18e>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1e58      	subs	r0, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	0099      	lsls	r1, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Init+0x196>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e022      	b.n	8001dc0 <HAL_I2C_Init+0x1dc>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10e      	bne.n	8001da0 <HAL_I2C_Init+0x1bc>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1e58      	subs	r0, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6859      	ldr	r1, [r3, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	440b      	add	r3, r1
 8001d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d9e:	e00f      	b.n	8001dc0 <HAL_I2C_Init+0x1dc>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1e58      	subs	r0, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	0099      	lsls	r1, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	6809      	ldr	r1, [r1, #0]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6911      	ldr	r1, [r2, #16]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68d2      	ldr	r2, [r2, #12]
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	000186a0 	.word	0x000186a0
 8001e5c:	001e847f 	.word	0x001e847f
 8001e60:	003d08ff 	.word	0x003d08ff
 8001e64:	431bde83 	.word	0x431bde83
 8001e68:	10624dd3 	.word	0x10624dd3

08001e6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	461a      	mov	r2, r3
 8001e78:	460b      	mov	r3, r1
 8001e7a:	817b      	strh	r3, [r7, #10]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fbe4 	bl	800164c <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	f040 80e0 	bne.w	8002054 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2319      	movs	r3, #25
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4970      	ldr	r1, [pc, #448]	@ (8002060 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f964 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e0d3      	b.n	8002056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2C_Master_Transmit+0x50>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e0cc      	b.n	8002056 <HAL_I2C_Master_Transmit+0x1ea>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d007      	beq.n	8001ee2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ef0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2221      	movs	r2, #33	@ 0x21
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2210      	movs	r2, #16
 8001efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	893a      	ldrh	r2, [r7, #8]
 8001f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a50      	ldr	r2, [pc, #320]	@ (8002064 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f24:	8979      	ldrh	r1, [r7, #10]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	6a3a      	ldr	r2, [r7, #32]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f89c 	bl	8002068 <I2C_MasterRequestWrite>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e08d      	b.n	8002056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f50:	e066      	b.n	8002020 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fa22 	bl	80023a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d107      	bne.n	8001f7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06b      	b.n	8002056 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d11b      	bne.n	8001ff4 <HAL_I2C_Master_Transmit+0x188>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d017      	beq.n	8001ff4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	6a39      	ldr	r1, [r7, #32]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 fa19 	bl	8002430 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00d      	beq.n	8002020 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	2b04      	cmp	r3, #4
 800200a:	d107      	bne.n	800201c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800201a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e01a      	b.n	8002056 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002024:	2b00      	cmp	r3, #0
 8002026:	d194      	bne.n	8001f52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	00100002 	.word	0x00100002
 8002064:	ffff0000 	.word	0xffff0000

08002068 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	460b      	mov	r3, r1
 8002076:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d006      	beq.n	8002092 <I2C_MasterRequestWrite+0x2a>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d003      	beq.n	8002092 <I2C_MasterRequestWrite+0x2a>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002090:	d108      	bne.n	80020a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e00b      	b.n	80020bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	2b12      	cmp	r3, #18
 80020aa:	d107      	bne.n	80020bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f84f 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00d      	beq.n	80020f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e2:	d103      	bne.n	80020ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e035      	b.n	800215c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020f8:	d108      	bne.n	800210c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002108:	611a      	str	r2, [r3, #16]
 800210a:	e01b      	b.n	8002144 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800210c:	897b      	ldrh	r3, [r7, #10]
 800210e:	11db      	asrs	r3, r3, #7
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f003 0306 	and.w	r3, r3, #6
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f063 030f 	orn	r3, r3, #15
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	490e      	ldr	r1, [pc, #56]	@ (8002164 <I2C_MasterRequestWrite+0xfc>)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f898 	bl	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e010      	b.n	800215c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800213a:	897b      	ldrh	r3, [r7, #10]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4907      	ldr	r1, [pc, #28]	@ (8002168 <I2C_MasterRequestWrite+0x100>)
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f888 	bl	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	00010008 	.word	0x00010008
 8002168:	00010002 	.word	0x00010002

0800216c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800217c:	e048      	b.n	8002210 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d044      	beq.n	8002210 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002186:	f7ff fa61 	bl	800164c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d302      	bcc.n	800219c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d139      	bne.n	8002210 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10d      	bne.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	e00c      	b.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	43da      	mvns	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4013      	ands	r3, r2
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d116      	bne.n	8002210 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e023      	b.n	8002258 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10d      	bne.n	8002236 <I2C_WaitOnFlagUntilTimeout+0xca>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	43da      	mvns	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4013      	ands	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	e00c      	b.n	8002250 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	43da      	mvns	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4013      	ands	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	429a      	cmp	r2, r3
 8002254:	d093      	beq.n	800217e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800226e:	e071      	b.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227e:	d123      	bne.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002298:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f043 0204 	orr.w	r2, r3, #4
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e067      	b.n	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d041      	beq.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d0:	f7ff f9bc 	bl	800164c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d302      	bcc.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d136      	bne.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10c      	bne.n	800230a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4013      	ands	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e00b      	b.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	43da      	mvns	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e021      	b.n	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	0c1b      	lsrs	r3, r3, #16
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10c      	bne.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	43da      	mvns	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e00b      	b.n	8002390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4013      	ands	r3, r2
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	f47f af6d 	bne.w	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ac:	e034      	b.n	8002418 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f886 	bl	80024c0 <I2C_IsAcknowledgeFailed>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e034      	b.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d028      	beq.n	8002418 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7ff f941 	bl	800164c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11d      	bne.n	8002418 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b80      	cmp	r3, #128	@ 0x80
 80023e8:	d016      	beq.n	8002418 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e007      	b.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002422:	2b80      	cmp	r3, #128	@ 0x80
 8002424:	d1c3      	bne.n	80023ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800243c:	e034      	b.n	80024a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f83e 	bl	80024c0 <I2C_IsAcknowledgeFailed>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e034      	b.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d028      	beq.n	80024a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7ff f8f9 	bl	800164c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d11d      	bne.n	80024a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d016      	beq.n	80024a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d1c3      	bne.n	800243e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d6:	d11b      	bne.n	8002510 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e267      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253e:	4b88      	ldr	r3, [pc, #544]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4b85      	ldr	r3, [pc, #532]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002552:	2b08      	cmp	r3, #8
 8002554:	d112      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b82      	ldr	r3, [pc, #520]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b7e      	ldr	r3, [pc, #504]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e242      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x74>
 8002586:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b70      	ldr	r3, [pc, #448]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 80025b8:	4b69      	ldr	r3, [pc, #420]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a68      	ldr	r2, [pc, #416]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b66      	ldr	r3, [pc, #408]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a65      	ldr	r2, [pc, #404]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff f838 	bl	800164c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff f834 	bl	800164c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e207      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff f824 	bl	800164c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7ff f820 	bl	800164c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1f3      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b51      	ldr	r3, [pc, #324]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002636:	4b4a      	ldr	r3, [pc, #296]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b44      	ldr	r3, [pc, #272]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b41      	ldr	r3, [pc, #260]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1c7      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b3b      	ldr	r3, [pc, #236]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4937      	ldr	r1, [pc, #220]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <HAL_RCC_OscConfig+0x244>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe ffd9 	bl	800164c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe ffd5 	bl	800164c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1a8      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b28      	ldr	r3, [pc, #160]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4925      	ldr	r1, [pc, #148]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <HAL_RCC_OscConfig+0x244>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe ffb8 	bl	800164c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7fe ffb4 	bl	800164c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e187      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d036      	beq.n	8002778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_RCC_OscConfig+0x248>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe ff98 	bl	800164c <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe ff94 	bl	800164c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e167      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
 800273e:	e01b      	b.n	8002778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_OscConfig+0x248>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe ff81 	bl	800164c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	e00e      	b.n	800276c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274e:	f7fe ff7d 	bl	800164c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d907      	bls.n	800276c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e150      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002760:	40023800 	.word	0x40023800
 8002764:	42470000 	.word	0x42470000
 8002768:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b88      	ldr	r3, [pc, #544]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ea      	bne.n	800274e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8097 	beq.w	80028b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b81      	ldr	r3, [pc, #516]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b7d      	ldr	r3, [pc, #500]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a7c      	ldr	r2, [pc, #496]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b77      	ldr	r3, [pc, #476]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4b74      	ldr	r3, [pc, #464]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a73      	ldr	r2, [pc, #460]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7fe ff3d 	bl	800164c <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7fe ff39 	bl	800164c <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e10c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x2ea>
 80027fc:	4b64      	ldr	r3, [pc, #400]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	4a63      	ldr	r2, [pc, #396]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	@ 0x70
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x30c>
 8002812:	4b5f      	ldr	r3, [pc, #380]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	4a5e      	ldr	r2, [pc, #376]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6713      	str	r3, [r2, #112]	@ 0x70
 800281e:	4b5c      	ldr	r3, [pc, #368]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	4a5b      	ldr	r2, [pc, #364]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6713      	str	r3, [r2, #112]	@ 0x70
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800282c:	4b58      	ldr	r3, [pc, #352]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	4a57      	ldr	r2, [pc, #348]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	@ 0x70
 8002838:	4b55      	ldr	r3, [pc, #340]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a54      	ldr	r2, [pc, #336]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fefe 	bl	800164c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fefa 	bl	800164c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0cb      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	4b49      	ldr	r3, [pc, #292]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ee      	beq.n	8002854 <HAL_RCC_OscConfig+0x334>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7fe fee8 	bl	800164c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fee4 	bl	800164c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0b5      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	4b3e      	ldr	r3, [pc, #248]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ee      	bne.n	8002880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	4a38      	ldr	r2, [pc, #224]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a1 	beq.w	8002a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028be:	4b34      	ldr	r3, [pc, #208]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d05c      	beq.n	8002984 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d141      	bne.n	8002956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe feb8 	bl	800164c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe feb4 	bl	800164c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e087      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	491b      	ldr	r1, [pc, #108]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7fe fe8d 	bl	800164c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7fe fe89 	bl	800164c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e05c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x416>
 8002954:	e054      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fe76 	bl	800164c <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe fe72 	bl	800164c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e045      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x444>
 8002982:	e03d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e038      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002990:	40023800 	.word	0x40023800
 8002994:	40007000 	.word	0x40007000
 8002998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800299c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_RCC_OscConfig+0x4ec>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d028      	beq.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d121      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11a      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cc      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d90c      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b65      	ldr	r3, [pc, #404]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a58      	ldr	r2, [pc, #352]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a52      	ldr	r2, [pc, #328]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d119      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3f      	ldr	r3, [pc, #252]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3b      	ldr	r3, [pc, #236]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e067      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b37      	ldr	r3, [pc, #220]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4934      	ldr	r1, [pc, #208]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fda4 	bl	800164c <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe fda0 	bl	800164c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d20c      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fd04 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08003da4 	.word	0x08003da4
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b094      	sub	sp, #80	@ 0x50
 8002be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf4:	4b79      	ldr	r3, [pc, #484]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	f200 80e1 	bhi.w	8002dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0e:	e0db      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b73      	ldr	r3, [pc, #460]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c14:	e0db      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c16:	4b73      	ldr	r3, [pc, #460]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c1a:	e0d8      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c26:	4b6d      	ldr	r3, [pc, #436]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d063      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b6a      	ldr	r3, [pc, #424]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4621      	mov	r1, r4
 8002c68:	1a51      	subs	r1, r2, r1
 8002c6a:	6139      	str	r1, [r7, #16]
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c80:	4659      	mov	r1, fp
 8002c82:	018b      	lsls	r3, r1, #6
 8002c84:	4651      	mov	r1, sl
 8002c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	018a      	lsls	r2, r1, #6
 8002c8e:	4651      	mov	r1, sl
 8002c90:	ebb2 0801 	subs.w	r8, r2, r1
 8002c94:	4659      	mov	r1, fp
 8002c96:	eb63 0901 	sbc.w	r9, r3, r1
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cae:	4690      	mov	r8, r2
 8002cb0:	4699      	mov	r9, r3
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	eb18 0303 	adds.w	r3, r8, r3
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	462b      	mov	r3, r5
 8002cbc:	eb49 0303 	adc.w	r3, r9, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cce:	4629      	mov	r1, r5
 8002cd0:	024b      	lsls	r3, r1, #9
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cd8:	4621      	mov	r1, r4
 8002cda:	024a      	lsls	r2, r1, #9
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cec:	f7fd feb6 	bl	8000a5c <__aeabi_uldivmod>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cf8:	e058      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b38      	ldr	r3, [pc, #224]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	2200      	movs	r2, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	4611      	mov	r1, r2
 8002d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	0159      	lsls	r1, r3, #5
 8002d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d26:	0150      	lsls	r0, r2, #5
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d32:	4649      	mov	r1, r9
 8002d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d50:	eb63 050b 	sbc.w	r5, r3, fp
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	00eb      	lsls	r3, r5, #3
 8002d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d62:	00e2      	lsls	r2, r4, #3
 8002d64:	4614      	mov	r4, r2
 8002d66:	461d      	mov	r5, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	18e3      	adds	r3, r4, r3
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	464b      	mov	r3, r9
 8002d70:	eb45 0303 	adc.w	r3, r5, r3
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d82:	4629      	mov	r1, r5
 8002d84:	028b      	lsls	r3, r1, #10
 8002d86:	4621      	mov	r1, r4
 8002d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	028a      	lsls	r2, r1, #10
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d96:	2200      	movs	r2, #0
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	61fa      	str	r2, [r7, #28]
 8002d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da0:	f7fd fe5c 	bl	8000a5c <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3750      	adds	r7, #80	@ 0x50
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	007a1200 	.word	0x007a1200

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000000 	.word	0x20000000

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0a9b      	lsrs	r3, r3, #10
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08003db4 	.word	0x08003db4

08002e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e041      	b.n	8002ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fad2 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 f950 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e03c      	b.n	8002f5a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	@ (8002f68 <HAL_TIM_Base_Start+0xa0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d018      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efa:	d013      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1a      	ldr	r2, [pc, #104]	@ (8002f6c <HAL_TIM_Base_Start+0xa4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00e      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a19      	ldr	r2, [pc, #100]	@ (8002f70 <HAL_TIM_Base_Start+0xa8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a17      	ldr	r2, [pc, #92]	@ (8002f74 <HAL_TIM_Base_Start+0xac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a16      	ldr	r2, [pc, #88]	@ (8002f78 <HAL_TIM_Base_Start+0xb0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d111      	bne.n	8002f48 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d010      	beq.n	8002f58 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f46:	e007      	b.n	8002f58 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800
 8002f74:	40000c00 	.word	0x40000c00
 8002f78:	40014000 	.word	0x40014000

08002f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_TIM_ConfigClockSource+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0b4      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x186>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd0:	d03e      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0xd4>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd6:	f200 8087 	bhi.w	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fde:	f000 8086 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x172>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe6:	d87f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b70      	cmp	r3, #112	@ 0x70
 8002fea:	d01a      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xa6>
 8002fec:	2b70      	cmp	r3, #112	@ 0x70
 8002fee:	d87b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b60      	cmp	r3, #96	@ 0x60
 8002ff2:	d050      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x11a>
 8002ff4:	2b60      	cmp	r3, #96	@ 0x60
 8002ff6:	d877      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b50      	cmp	r3, #80	@ 0x50
 8002ffa:	d03c      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xfa>
 8002ffc:	2b50      	cmp	r3, #80	@ 0x50
 8002ffe:	d873      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b40      	cmp	r3, #64	@ 0x40
 8003002:	d058      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003004:	2b40      	cmp	r3, #64	@ 0x40
 8003006:	d86f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b30      	cmp	r3, #48	@ 0x30
 800300a:	d064      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 800300c:	2b30      	cmp	r3, #48	@ 0x30
 800300e:	d86b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d060      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003014:	2b20      	cmp	r3, #32
 8003016:	d867      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	2b10      	cmp	r3, #16
 800301e:	d05a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003020:	e062      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003032:	f000 f971 	bl	8003318 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	609a      	str	r2, [r3, #8]
      break;
 800304e:	e04f      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003060:	f000 f95a 	bl	8003318 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003072:	609a      	str	r2, [r3, #8]
      break;
 8003074:	e03c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	461a      	mov	r2, r3
 8003084:	f000 f8ce 	bl	8003224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2150      	movs	r1, #80	@ 0x50
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f927 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 8003094:	e02c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 f8ed 	bl	8003282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2160      	movs	r1, #96	@ 0x60
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f917 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e01c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 f8ae 	bl	8003224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2140      	movs	r1, #64	@ 0x40
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f907 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e00c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f000 f8fe 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 80030e6:	e003      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e000      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3a      	ldr	r2, [pc, #232]	@ (8003208 <TIM_Base_SetConfig+0xfc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00f      	beq.n	8003144 <TIM_Base_SetConfig+0x38>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0x38>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a37      	ldr	r2, [pc, #220]	@ (800320c <TIM_Base_SetConfig+0x100>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0x38>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a36      	ldr	r2, [pc, #216]	@ (8003210 <TIM_Base_SetConfig+0x104>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x38>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a35      	ldr	r2, [pc, #212]	@ (8003214 <TIM_Base_SetConfig+0x108>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2b      	ldr	r2, [pc, #172]	@ (8003208 <TIM_Base_SetConfig+0xfc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01b      	beq.n	8003196 <TIM_Base_SetConfig+0x8a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003164:	d017      	beq.n	8003196 <TIM_Base_SetConfig+0x8a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a28      	ldr	r2, [pc, #160]	@ (800320c <TIM_Base_SetConfig+0x100>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <TIM_Base_SetConfig+0x8a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a27      	ldr	r2, [pc, #156]	@ (8003210 <TIM_Base_SetConfig+0x104>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0x8a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a26      	ldr	r2, [pc, #152]	@ (8003214 <TIM_Base_SetConfig+0x108>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0x8a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a25      	ldr	r2, [pc, #148]	@ (8003218 <TIM_Base_SetConfig+0x10c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a24      	ldr	r2, [pc, #144]	@ (800321c <TIM_Base_SetConfig+0x110>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0x8a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a23      	ldr	r2, [pc, #140]	@ (8003220 <TIM_Base_SetConfig+0x114>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003208 <TIM_Base_SetConfig+0xfc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f023 0201 	bic.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	611a      	str	r2, [r3, #16]
  }
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800

08003224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800324e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f023 030a 	bic.w	r3, r3, #10
 8003260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003282:	b480      	push	{r7}
 8003284:	b087      	sub	sp, #28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f023 0210 	bic.w	r2, r3, #16
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	031b      	lsls	r3, r3, #12
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	f043 0307 	orr.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	021a      	lsls	r2, r3, #8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	431a      	orrs	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800336c:	2302      	movs	r3, #2
 800336e:	e050      	b.n	8003412 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d013      	beq.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a18      	ldr	r2, [pc, #96]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a16      	ldr	r2, [pc, #88]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a15      	ldr	r2, [pc, #84]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a13      	ldr	r2, [pc, #76]	@ (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10c      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800
 800342c:	40000c00 	.word	0x40000c00
 8003430:	40014000 	.word	0x40014000

08003434 <siprintf>:
 8003434:	b40e      	push	{r1, r2, r3}
 8003436:	b500      	push	{lr}
 8003438:	b09c      	sub	sp, #112	@ 0x70
 800343a:	ab1d      	add	r3, sp, #116	@ 0x74
 800343c:	9002      	str	r0, [sp, #8]
 800343e:	9006      	str	r0, [sp, #24]
 8003440:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003444:	4809      	ldr	r0, [pc, #36]	@ (800346c <siprintf+0x38>)
 8003446:	9107      	str	r1, [sp, #28]
 8003448:	9104      	str	r1, [sp, #16]
 800344a:	4909      	ldr	r1, [pc, #36]	@ (8003470 <siprintf+0x3c>)
 800344c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003450:	9105      	str	r1, [sp, #20]
 8003452:	6800      	ldr	r0, [r0, #0]
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	a902      	add	r1, sp, #8
 8003458:	f000 f994 	bl	8003784 <_svfiprintf_r>
 800345c:	9b02      	ldr	r3, [sp, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	b01c      	add	sp, #112	@ 0x70
 8003464:	f85d eb04 	ldr.w	lr, [sp], #4
 8003468:	b003      	add	sp, #12
 800346a:	4770      	bx	lr
 800346c:	2000000c 	.word	0x2000000c
 8003470:	ffff0208 	.word	0xffff0208

08003474 <memset>:
 8003474:	4402      	add	r2, r0
 8003476:	4603      	mov	r3, r0
 8003478:	4293      	cmp	r3, r2
 800347a:	d100      	bne.n	800347e <memset+0xa>
 800347c:	4770      	bx	lr
 800347e:	f803 1b01 	strb.w	r1, [r3], #1
 8003482:	e7f9      	b.n	8003478 <memset+0x4>

08003484 <__errno>:
 8003484:	4b01      	ldr	r3, [pc, #4]	@ (800348c <__errno+0x8>)
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	2000000c 	.word	0x2000000c

08003490 <__libc_init_array>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4d0d      	ldr	r5, [pc, #52]	@ (80034c8 <__libc_init_array+0x38>)
 8003494:	4c0d      	ldr	r4, [pc, #52]	@ (80034cc <__libc_init_array+0x3c>)
 8003496:	1b64      	subs	r4, r4, r5
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	2600      	movs	r6, #0
 800349c:	42a6      	cmp	r6, r4
 800349e:	d109      	bne.n	80034b4 <__libc_init_array+0x24>
 80034a0:	4d0b      	ldr	r5, [pc, #44]	@ (80034d0 <__libc_init_array+0x40>)
 80034a2:	4c0c      	ldr	r4, [pc, #48]	@ (80034d4 <__libc_init_array+0x44>)
 80034a4:	f000 fc66 	bl	8003d74 <_init>
 80034a8:	1b64      	subs	r4, r4, r5
 80034aa:	10a4      	asrs	r4, r4, #2
 80034ac:	2600      	movs	r6, #0
 80034ae:	42a6      	cmp	r6, r4
 80034b0:	d105      	bne.n	80034be <__libc_init_array+0x2e>
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b8:	4798      	blx	r3
 80034ba:	3601      	adds	r6, #1
 80034bc:	e7ee      	b.n	800349c <__libc_init_array+0xc>
 80034be:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c2:	4798      	blx	r3
 80034c4:	3601      	adds	r6, #1
 80034c6:	e7f2      	b.n	80034ae <__libc_init_array+0x1e>
 80034c8:	08003df8 	.word	0x08003df8
 80034cc:	08003df8 	.word	0x08003df8
 80034d0:	08003df8 	.word	0x08003df8
 80034d4:	08003dfc 	.word	0x08003dfc

080034d8 <__retarget_lock_acquire_recursive>:
 80034d8:	4770      	bx	lr

080034da <__retarget_lock_release_recursive>:
 80034da:	4770      	bx	lr

080034dc <_free_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	4605      	mov	r5, r0
 80034e0:	2900      	cmp	r1, #0
 80034e2:	d041      	beq.n	8003568 <_free_r+0x8c>
 80034e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e8:	1f0c      	subs	r4, r1, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfb8      	it	lt
 80034ee:	18e4      	addlt	r4, r4, r3
 80034f0:	f000 f8e0 	bl	80036b4 <__malloc_lock>
 80034f4:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <_free_r+0x90>)
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	b933      	cbnz	r3, 8003508 <_free_r+0x2c>
 80034fa:	6063      	str	r3, [r4, #4]
 80034fc:	6014      	str	r4, [r2, #0]
 80034fe:	4628      	mov	r0, r5
 8003500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003504:	f000 b8dc 	b.w	80036c0 <__malloc_unlock>
 8003508:	42a3      	cmp	r3, r4
 800350a:	d908      	bls.n	800351e <_free_r+0x42>
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	1821      	adds	r1, r4, r0
 8003510:	428b      	cmp	r3, r1
 8003512:	bf01      	itttt	eq
 8003514:	6819      	ldreq	r1, [r3, #0]
 8003516:	685b      	ldreq	r3, [r3, #4]
 8003518:	1809      	addeq	r1, r1, r0
 800351a:	6021      	streq	r1, [r4, #0]
 800351c:	e7ed      	b.n	80034fa <_free_r+0x1e>
 800351e:	461a      	mov	r2, r3
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	b10b      	cbz	r3, 8003528 <_free_r+0x4c>
 8003524:	42a3      	cmp	r3, r4
 8003526:	d9fa      	bls.n	800351e <_free_r+0x42>
 8003528:	6811      	ldr	r1, [r2, #0]
 800352a:	1850      	adds	r0, r2, r1
 800352c:	42a0      	cmp	r0, r4
 800352e:	d10b      	bne.n	8003548 <_free_r+0x6c>
 8003530:	6820      	ldr	r0, [r4, #0]
 8003532:	4401      	add	r1, r0
 8003534:	1850      	adds	r0, r2, r1
 8003536:	4283      	cmp	r3, r0
 8003538:	6011      	str	r1, [r2, #0]
 800353a:	d1e0      	bne.n	80034fe <_free_r+0x22>
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	6053      	str	r3, [r2, #4]
 8003542:	4408      	add	r0, r1
 8003544:	6010      	str	r0, [r2, #0]
 8003546:	e7da      	b.n	80034fe <_free_r+0x22>
 8003548:	d902      	bls.n	8003550 <_free_r+0x74>
 800354a:	230c      	movs	r3, #12
 800354c:	602b      	str	r3, [r5, #0]
 800354e:	e7d6      	b.n	80034fe <_free_r+0x22>
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	1821      	adds	r1, r4, r0
 8003554:	428b      	cmp	r3, r1
 8003556:	bf04      	itt	eq
 8003558:	6819      	ldreq	r1, [r3, #0]
 800355a:	685b      	ldreq	r3, [r3, #4]
 800355c:	6063      	str	r3, [r4, #4]
 800355e:	bf04      	itt	eq
 8003560:	1809      	addeq	r1, r1, r0
 8003562:	6021      	streq	r1, [r4, #0]
 8003564:	6054      	str	r4, [r2, #4]
 8003566:	e7ca      	b.n	80034fe <_free_r+0x22>
 8003568:	bd38      	pop	{r3, r4, r5, pc}
 800356a:	bf00      	nop
 800356c:	20000274 	.word	0x20000274

08003570 <sbrk_aligned>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	4e0f      	ldr	r6, [pc, #60]	@ (80035b0 <sbrk_aligned+0x40>)
 8003574:	460c      	mov	r4, r1
 8003576:	6831      	ldr	r1, [r6, #0]
 8003578:	4605      	mov	r5, r0
 800357a:	b911      	cbnz	r1, 8003582 <sbrk_aligned+0x12>
 800357c:	f000 fba6 	bl	8003ccc <_sbrk_r>
 8003580:	6030      	str	r0, [r6, #0]
 8003582:	4621      	mov	r1, r4
 8003584:	4628      	mov	r0, r5
 8003586:	f000 fba1 	bl	8003ccc <_sbrk_r>
 800358a:	1c43      	adds	r3, r0, #1
 800358c:	d103      	bne.n	8003596 <sbrk_aligned+0x26>
 800358e:	f04f 34ff 	mov.w	r4, #4294967295
 8003592:	4620      	mov	r0, r4
 8003594:	bd70      	pop	{r4, r5, r6, pc}
 8003596:	1cc4      	adds	r4, r0, #3
 8003598:	f024 0403 	bic.w	r4, r4, #3
 800359c:	42a0      	cmp	r0, r4
 800359e:	d0f8      	beq.n	8003592 <sbrk_aligned+0x22>
 80035a0:	1a21      	subs	r1, r4, r0
 80035a2:	4628      	mov	r0, r5
 80035a4:	f000 fb92 	bl	8003ccc <_sbrk_r>
 80035a8:	3001      	adds	r0, #1
 80035aa:	d1f2      	bne.n	8003592 <sbrk_aligned+0x22>
 80035ac:	e7ef      	b.n	800358e <sbrk_aligned+0x1e>
 80035ae:	bf00      	nop
 80035b0:	20000270 	.word	0x20000270

080035b4 <_malloc_r>:
 80035b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035b8:	1ccd      	adds	r5, r1, #3
 80035ba:	f025 0503 	bic.w	r5, r5, #3
 80035be:	3508      	adds	r5, #8
 80035c0:	2d0c      	cmp	r5, #12
 80035c2:	bf38      	it	cc
 80035c4:	250c      	movcc	r5, #12
 80035c6:	2d00      	cmp	r5, #0
 80035c8:	4606      	mov	r6, r0
 80035ca:	db01      	blt.n	80035d0 <_malloc_r+0x1c>
 80035cc:	42a9      	cmp	r1, r5
 80035ce:	d904      	bls.n	80035da <_malloc_r+0x26>
 80035d0:	230c      	movs	r3, #12
 80035d2:	6033      	str	r3, [r6, #0]
 80035d4:	2000      	movs	r0, #0
 80035d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036b0 <_malloc_r+0xfc>
 80035de:	f000 f869 	bl	80036b4 <__malloc_lock>
 80035e2:	f8d8 3000 	ldr.w	r3, [r8]
 80035e6:	461c      	mov	r4, r3
 80035e8:	bb44      	cbnz	r4, 800363c <_malloc_r+0x88>
 80035ea:	4629      	mov	r1, r5
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7ff ffbf 	bl	8003570 <sbrk_aligned>
 80035f2:	1c43      	adds	r3, r0, #1
 80035f4:	4604      	mov	r4, r0
 80035f6:	d158      	bne.n	80036aa <_malloc_r+0xf6>
 80035f8:	f8d8 4000 	ldr.w	r4, [r8]
 80035fc:	4627      	mov	r7, r4
 80035fe:	2f00      	cmp	r7, #0
 8003600:	d143      	bne.n	800368a <_malloc_r+0xd6>
 8003602:	2c00      	cmp	r4, #0
 8003604:	d04b      	beq.n	800369e <_malloc_r+0xea>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	4639      	mov	r1, r7
 800360a:	4630      	mov	r0, r6
 800360c:	eb04 0903 	add.w	r9, r4, r3
 8003610:	f000 fb5c 	bl	8003ccc <_sbrk_r>
 8003614:	4581      	cmp	r9, r0
 8003616:	d142      	bne.n	800369e <_malloc_r+0xea>
 8003618:	6821      	ldr	r1, [r4, #0]
 800361a:	1a6d      	subs	r5, r5, r1
 800361c:	4629      	mov	r1, r5
 800361e:	4630      	mov	r0, r6
 8003620:	f7ff ffa6 	bl	8003570 <sbrk_aligned>
 8003624:	3001      	adds	r0, #1
 8003626:	d03a      	beq.n	800369e <_malloc_r+0xea>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	442b      	add	r3, r5
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	f8d8 3000 	ldr.w	r3, [r8]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	bb62      	cbnz	r2, 8003690 <_malloc_r+0xdc>
 8003636:	f8c8 7000 	str.w	r7, [r8]
 800363a:	e00f      	b.n	800365c <_malloc_r+0xa8>
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	1b52      	subs	r2, r2, r5
 8003640:	d420      	bmi.n	8003684 <_malloc_r+0xd0>
 8003642:	2a0b      	cmp	r2, #11
 8003644:	d917      	bls.n	8003676 <_malloc_r+0xc2>
 8003646:	1961      	adds	r1, r4, r5
 8003648:	42a3      	cmp	r3, r4
 800364a:	6025      	str	r5, [r4, #0]
 800364c:	bf18      	it	ne
 800364e:	6059      	strne	r1, [r3, #4]
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	bf08      	it	eq
 8003654:	f8c8 1000 	streq.w	r1, [r8]
 8003658:	5162      	str	r2, [r4, r5]
 800365a:	604b      	str	r3, [r1, #4]
 800365c:	4630      	mov	r0, r6
 800365e:	f000 f82f 	bl	80036c0 <__malloc_unlock>
 8003662:	f104 000b 	add.w	r0, r4, #11
 8003666:	1d23      	adds	r3, r4, #4
 8003668:	f020 0007 	bic.w	r0, r0, #7
 800366c:	1ac2      	subs	r2, r0, r3
 800366e:	bf1c      	itt	ne
 8003670:	1a1b      	subne	r3, r3, r0
 8003672:	50a3      	strne	r3, [r4, r2]
 8003674:	e7af      	b.n	80035d6 <_malloc_r+0x22>
 8003676:	6862      	ldr	r2, [r4, #4]
 8003678:	42a3      	cmp	r3, r4
 800367a:	bf0c      	ite	eq
 800367c:	f8c8 2000 	streq.w	r2, [r8]
 8003680:	605a      	strne	r2, [r3, #4]
 8003682:	e7eb      	b.n	800365c <_malloc_r+0xa8>
 8003684:	4623      	mov	r3, r4
 8003686:	6864      	ldr	r4, [r4, #4]
 8003688:	e7ae      	b.n	80035e8 <_malloc_r+0x34>
 800368a:	463c      	mov	r4, r7
 800368c:	687f      	ldr	r7, [r7, #4]
 800368e:	e7b6      	b.n	80035fe <_malloc_r+0x4a>
 8003690:	461a      	mov	r2, r3
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	42a3      	cmp	r3, r4
 8003696:	d1fb      	bne.n	8003690 <_malloc_r+0xdc>
 8003698:	2300      	movs	r3, #0
 800369a:	6053      	str	r3, [r2, #4]
 800369c:	e7de      	b.n	800365c <_malloc_r+0xa8>
 800369e:	230c      	movs	r3, #12
 80036a0:	6033      	str	r3, [r6, #0]
 80036a2:	4630      	mov	r0, r6
 80036a4:	f000 f80c 	bl	80036c0 <__malloc_unlock>
 80036a8:	e794      	b.n	80035d4 <_malloc_r+0x20>
 80036aa:	6005      	str	r5, [r0, #0]
 80036ac:	e7d6      	b.n	800365c <_malloc_r+0xa8>
 80036ae:	bf00      	nop
 80036b0:	20000274 	.word	0x20000274

080036b4 <__malloc_lock>:
 80036b4:	4801      	ldr	r0, [pc, #4]	@ (80036bc <__malloc_lock+0x8>)
 80036b6:	f7ff bf0f 	b.w	80034d8 <__retarget_lock_acquire_recursive>
 80036ba:	bf00      	nop
 80036bc:	2000026c 	.word	0x2000026c

080036c0 <__malloc_unlock>:
 80036c0:	4801      	ldr	r0, [pc, #4]	@ (80036c8 <__malloc_unlock+0x8>)
 80036c2:	f7ff bf0a 	b.w	80034da <__retarget_lock_release_recursive>
 80036c6:	bf00      	nop
 80036c8:	2000026c 	.word	0x2000026c

080036cc <__ssputs_r>:
 80036cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d0:	688e      	ldr	r6, [r1, #8]
 80036d2:	461f      	mov	r7, r3
 80036d4:	42be      	cmp	r6, r7
 80036d6:	680b      	ldr	r3, [r1, #0]
 80036d8:	4682      	mov	sl, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	4690      	mov	r8, r2
 80036de:	d82d      	bhi.n	800373c <__ssputs_r+0x70>
 80036e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80036e8:	d026      	beq.n	8003738 <__ssputs_r+0x6c>
 80036ea:	6965      	ldr	r5, [r4, #20]
 80036ec:	6909      	ldr	r1, [r1, #16]
 80036ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036f2:	eba3 0901 	sub.w	r9, r3, r1
 80036f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036fa:	1c7b      	adds	r3, r7, #1
 80036fc:	444b      	add	r3, r9
 80036fe:	106d      	asrs	r5, r5, #1
 8003700:	429d      	cmp	r5, r3
 8003702:	bf38      	it	cc
 8003704:	461d      	movcc	r5, r3
 8003706:	0553      	lsls	r3, r2, #21
 8003708:	d527      	bpl.n	800375a <__ssputs_r+0x8e>
 800370a:	4629      	mov	r1, r5
 800370c:	f7ff ff52 	bl	80035b4 <_malloc_r>
 8003710:	4606      	mov	r6, r0
 8003712:	b360      	cbz	r0, 800376e <__ssputs_r+0xa2>
 8003714:	6921      	ldr	r1, [r4, #16]
 8003716:	464a      	mov	r2, r9
 8003718:	f000 fae8 	bl	8003cec <memcpy>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	6126      	str	r6, [r4, #16]
 800372a:	6165      	str	r5, [r4, #20]
 800372c:	444e      	add	r6, r9
 800372e:	eba5 0509 	sub.w	r5, r5, r9
 8003732:	6026      	str	r6, [r4, #0]
 8003734:	60a5      	str	r5, [r4, #8]
 8003736:	463e      	mov	r6, r7
 8003738:	42be      	cmp	r6, r7
 800373a:	d900      	bls.n	800373e <__ssputs_r+0x72>
 800373c:	463e      	mov	r6, r7
 800373e:	6820      	ldr	r0, [r4, #0]
 8003740:	4632      	mov	r2, r6
 8003742:	4641      	mov	r1, r8
 8003744:	f000 faa8 	bl	8003c98 <memmove>
 8003748:	68a3      	ldr	r3, [r4, #8]
 800374a:	1b9b      	subs	r3, r3, r6
 800374c:	60a3      	str	r3, [r4, #8]
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	4433      	add	r3, r6
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	2000      	movs	r0, #0
 8003756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375a:	462a      	mov	r2, r5
 800375c:	f000 fad4 	bl	8003d08 <_realloc_r>
 8003760:	4606      	mov	r6, r0
 8003762:	2800      	cmp	r0, #0
 8003764:	d1e0      	bne.n	8003728 <__ssputs_r+0x5c>
 8003766:	6921      	ldr	r1, [r4, #16]
 8003768:	4650      	mov	r0, sl
 800376a:	f7ff feb7 	bl	80034dc <_free_r>
 800376e:	230c      	movs	r3, #12
 8003770:	f8ca 3000 	str.w	r3, [sl]
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	e7e9      	b.n	8003756 <__ssputs_r+0x8a>
	...

08003784 <_svfiprintf_r>:
 8003784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003788:	4698      	mov	r8, r3
 800378a:	898b      	ldrh	r3, [r1, #12]
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	b09d      	sub	sp, #116	@ 0x74
 8003790:	4607      	mov	r7, r0
 8003792:	460d      	mov	r5, r1
 8003794:	4614      	mov	r4, r2
 8003796:	d510      	bpl.n	80037ba <_svfiprintf_r+0x36>
 8003798:	690b      	ldr	r3, [r1, #16]
 800379a:	b973      	cbnz	r3, 80037ba <_svfiprintf_r+0x36>
 800379c:	2140      	movs	r1, #64	@ 0x40
 800379e:	f7ff ff09 	bl	80035b4 <_malloc_r>
 80037a2:	6028      	str	r0, [r5, #0]
 80037a4:	6128      	str	r0, [r5, #16]
 80037a6:	b930      	cbnz	r0, 80037b6 <_svfiprintf_r+0x32>
 80037a8:	230c      	movs	r3, #12
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	b01d      	add	sp, #116	@ 0x74
 80037b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b6:	2340      	movs	r3, #64	@ 0x40
 80037b8:	616b      	str	r3, [r5, #20]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80037be:	2320      	movs	r3, #32
 80037c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80037c8:	2330      	movs	r3, #48	@ 0x30
 80037ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003968 <_svfiprintf_r+0x1e4>
 80037ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037d2:	f04f 0901 	mov.w	r9, #1
 80037d6:	4623      	mov	r3, r4
 80037d8:	469a      	mov	sl, r3
 80037da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037de:	b10a      	cbz	r2, 80037e4 <_svfiprintf_r+0x60>
 80037e0:	2a25      	cmp	r2, #37	@ 0x25
 80037e2:	d1f9      	bne.n	80037d8 <_svfiprintf_r+0x54>
 80037e4:	ebba 0b04 	subs.w	fp, sl, r4
 80037e8:	d00b      	beq.n	8003802 <_svfiprintf_r+0x7e>
 80037ea:	465b      	mov	r3, fp
 80037ec:	4622      	mov	r2, r4
 80037ee:	4629      	mov	r1, r5
 80037f0:	4638      	mov	r0, r7
 80037f2:	f7ff ff6b 	bl	80036cc <__ssputs_r>
 80037f6:	3001      	adds	r0, #1
 80037f8:	f000 80a7 	beq.w	800394a <_svfiprintf_r+0x1c6>
 80037fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037fe:	445a      	add	r2, fp
 8003800:	9209      	str	r2, [sp, #36]	@ 0x24
 8003802:	f89a 3000 	ldrb.w	r3, [sl]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 809f 	beq.w	800394a <_svfiprintf_r+0x1c6>
 800380c:	2300      	movs	r3, #0
 800380e:	f04f 32ff 	mov.w	r2, #4294967295
 8003812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003816:	f10a 0a01 	add.w	sl, sl, #1
 800381a:	9304      	str	r3, [sp, #16]
 800381c:	9307      	str	r3, [sp, #28]
 800381e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003822:	931a      	str	r3, [sp, #104]	@ 0x68
 8003824:	4654      	mov	r4, sl
 8003826:	2205      	movs	r2, #5
 8003828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800382c:	484e      	ldr	r0, [pc, #312]	@ (8003968 <_svfiprintf_r+0x1e4>)
 800382e:	f7fc fcd7 	bl	80001e0 <memchr>
 8003832:	9a04      	ldr	r2, [sp, #16]
 8003834:	b9d8      	cbnz	r0, 800386e <_svfiprintf_r+0xea>
 8003836:	06d0      	lsls	r0, r2, #27
 8003838:	bf44      	itt	mi
 800383a:	2320      	movmi	r3, #32
 800383c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003840:	0711      	lsls	r1, r2, #28
 8003842:	bf44      	itt	mi
 8003844:	232b      	movmi	r3, #43	@ 0x2b
 8003846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800384a:	f89a 3000 	ldrb.w	r3, [sl]
 800384e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003850:	d015      	beq.n	800387e <_svfiprintf_r+0xfa>
 8003852:	9a07      	ldr	r2, [sp, #28]
 8003854:	4654      	mov	r4, sl
 8003856:	2000      	movs	r0, #0
 8003858:	f04f 0c0a 	mov.w	ip, #10
 800385c:	4621      	mov	r1, r4
 800385e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003862:	3b30      	subs	r3, #48	@ 0x30
 8003864:	2b09      	cmp	r3, #9
 8003866:	d94b      	bls.n	8003900 <_svfiprintf_r+0x17c>
 8003868:	b1b0      	cbz	r0, 8003898 <_svfiprintf_r+0x114>
 800386a:	9207      	str	r2, [sp, #28]
 800386c:	e014      	b.n	8003898 <_svfiprintf_r+0x114>
 800386e:	eba0 0308 	sub.w	r3, r0, r8
 8003872:	fa09 f303 	lsl.w	r3, r9, r3
 8003876:	4313      	orrs	r3, r2
 8003878:	9304      	str	r3, [sp, #16]
 800387a:	46a2      	mov	sl, r4
 800387c:	e7d2      	b.n	8003824 <_svfiprintf_r+0xa0>
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	1d19      	adds	r1, r3, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	9103      	str	r1, [sp, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfbb      	ittet	lt
 800388a:	425b      	neglt	r3, r3
 800388c:	f042 0202 	orrlt.w	r2, r2, #2
 8003890:	9307      	strge	r3, [sp, #28]
 8003892:	9307      	strlt	r3, [sp, #28]
 8003894:	bfb8      	it	lt
 8003896:	9204      	strlt	r2, [sp, #16]
 8003898:	7823      	ldrb	r3, [r4, #0]
 800389a:	2b2e      	cmp	r3, #46	@ 0x2e
 800389c:	d10a      	bne.n	80038b4 <_svfiprintf_r+0x130>
 800389e:	7863      	ldrb	r3, [r4, #1]
 80038a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80038a2:	d132      	bne.n	800390a <_svfiprintf_r+0x186>
 80038a4:	9b03      	ldr	r3, [sp, #12]
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	9203      	str	r2, [sp, #12]
 80038ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038b0:	3402      	adds	r4, #2
 80038b2:	9305      	str	r3, [sp, #20]
 80038b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003978 <_svfiprintf_r+0x1f4>
 80038b8:	7821      	ldrb	r1, [r4, #0]
 80038ba:	2203      	movs	r2, #3
 80038bc:	4650      	mov	r0, sl
 80038be:	f7fc fc8f 	bl	80001e0 <memchr>
 80038c2:	b138      	cbz	r0, 80038d4 <_svfiprintf_r+0x150>
 80038c4:	9b04      	ldr	r3, [sp, #16]
 80038c6:	eba0 000a 	sub.w	r0, r0, sl
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	4082      	lsls	r2, r0
 80038ce:	4313      	orrs	r3, r2
 80038d0:	3401      	adds	r4, #1
 80038d2:	9304      	str	r3, [sp, #16]
 80038d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d8:	4824      	ldr	r0, [pc, #144]	@ (800396c <_svfiprintf_r+0x1e8>)
 80038da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038de:	2206      	movs	r2, #6
 80038e0:	f7fc fc7e 	bl	80001e0 <memchr>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d036      	beq.n	8003956 <_svfiprintf_r+0x1d2>
 80038e8:	4b21      	ldr	r3, [pc, #132]	@ (8003970 <_svfiprintf_r+0x1ec>)
 80038ea:	bb1b      	cbnz	r3, 8003934 <_svfiprintf_r+0x1b0>
 80038ec:	9b03      	ldr	r3, [sp, #12]
 80038ee:	3307      	adds	r3, #7
 80038f0:	f023 0307 	bic.w	r3, r3, #7
 80038f4:	3308      	adds	r3, #8
 80038f6:	9303      	str	r3, [sp, #12]
 80038f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038fa:	4433      	add	r3, r6
 80038fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80038fe:	e76a      	b.n	80037d6 <_svfiprintf_r+0x52>
 8003900:	fb0c 3202 	mla	r2, ip, r2, r3
 8003904:	460c      	mov	r4, r1
 8003906:	2001      	movs	r0, #1
 8003908:	e7a8      	b.n	800385c <_svfiprintf_r+0xd8>
 800390a:	2300      	movs	r3, #0
 800390c:	3401      	adds	r4, #1
 800390e:	9305      	str	r3, [sp, #20]
 8003910:	4619      	mov	r1, r3
 8003912:	f04f 0c0a 	mov.w	ip, #10
 8003916:	4620      	mov	r0, r4
 8003918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800391c:	3a30      	subs	r2, #48	@ 0x30
 800391e:	2a09      	cmp	r2, #9
 8003920:	d903      	bls.n	800392a <_svfiprintf_r+0x1a6>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0c6      	beq.n	80038b4 <_svfiprintf_r+0x130>
 8003926:	9105      	str	r1, [sp, #20]
 8003928:	e7c4      	b.n	80038b4 <_svfiprintf_r+0x130>
 800392a:	fb0c 2101 	mla	r1, ip, r1, r2
 800392e:	4604      	mov	r4, r0
 8003930:	2301      	movs	r3, #1
 8003932:	e7f0      	b.n	8003916 <_svfiprintf_r+0x192>
 8003934:	ab03      	add	r3, sp, #12
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	462a      	mov	r2, r5
 800393a:	4b0e      	ldr	r3, [pc, #56]	@ (8003974 <_svfiprintf_r+0x1f0>)
 800393c:	a904      	add	r1, sp, #16
 800393e:	4638      	mov	r0, r7
 8003940:	f3af 8000 	nop.w
 8003944:	1c42      	adds	r2, r0, #1
 8003946:	4606      	mov	r6, r0
 8003948:	d1d6      	bne.n	80038f8 <_svfiprintf_r+0x174>
 800394a:	89ab      	ldrh	r3, [r5, #12]
 800394c:	065b      	lsls	r3, r3, #25
 800394e:	f53f af2d 	bmi.w	80037ac <_svfiprintf_r+0x28>
 8003952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003954:	e72c      	b.n	80037b0 <_svfiprintf_r+0x2c>
 8003956:	ab03      	add	r3, sp, #12
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	462a      	mov	r2, r5
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <_svfiprintf_r+0x1f0>)
 800395e:	a904      	add	r1, sp, #16
 8003960:	4638      	mov	r0, r7
 8003962:	f000 f879 	bl	8003a58 <_printf_i>
 8003966:	e7ed      	b.n	8003944 <_svfiprintf_r+0x1c0>
 8003968:	08003dbc 	.word	0x08003dbc
 800396c:	08003dc6 	.word	0x08003dc6
 8003970:	00000000 	.word	0x00000000
 8003974:	080036cd 	.word	0x080036cd
 8003978:	08003dc2 	.word	0x08003dc2

0800397c <_printf_common>:
 800397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	4616      	mov	r6, r2
 8003982:	4698      	mov	r8, r3
 8003984:	688a      	ldr	r2, [r1, #8]
 8003986:	690b      	ldr	r3, [r1, #16]
 8003988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800398c:	4293      	cmp	r3, r2
 800398e:	bfb8      	it	lt
 8003990:	4613      	movlt	r3, r2
 8003992:	6033      	str	r3, [r6, #0]
 8003994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003998:	4607      	mov	r7, r0
 800399a:	460c      	mov	r4, r1
 800399c:	b10a      	cbz	r2, 80039a2 <_printf_common+0x26>
 800399e:	3301      	adds	r3, #1
 80039a0:	6033      	str	r3, [r6, #0]
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	0699      	lsls	r1, r3, #26
 80039a6:	bf42      	ittt	mi
 80039a8:	6833      	ldrmi	r3, [r6, #0]
 80039aa:	3302      	addmi	r3, #2
 80039ac:	6033      	strmi	r3, [r6, #0]
 80039ae:	6825      	ldr	r5, [r4, #0]
 80039b0:	f015 0506 	ands.w	r5, r5, #6
 80039b4:	d106      	bne.n	80039c4 <_printf_common+0x48>
 80039b6:	f104 0a19 	add.w	sl, r4, #25
 80039ba:	68e3      	ldr	r3, [r4, #12]
 80039bc:	6832      	ldr	r2, [r6, #0]
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	dc26      	bgt.n	8003a12 <_printf_common+0x96>
 80039c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039c8:	6822      	ldr	r2, [r4, #0]
 80039ca:	3b00      	subs	r3, #0
 80039cc:	bf18      	it	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	0692      	lsls	r2, r2, #26
 80039d2:	d42b      	bmi.n	8003a2c <_printf_common+0xb0>
 80039d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039d8:	4641      	mov	r1, r8
 80039da:	4638      	mov	r0, r7
 80039dc:	47c8      	blx	r9
 80039de:	3001      	adds	r0, #1
 80039e0:	d01e      	beq.n	8003a20 <_printf_common+0xa4>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	6922      	ldr	r2, [r4, #16]
 80039e6:	f003 0306 	and.w	r3, r3, #6
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	bf02      	ittt	eq
 80039ee:	68e5      	ldreq	r5, [r4, #12]
 80039f0:	6833      	ldreq	r3, [r6, #0]
 80039f2:	1aed      	subeq	r5, r5, r3
 80039f4:	68a3      	ldr	r3, [r4, #8]
 80039f6:	bf0c      	ite	eq
 80039f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039fc:	2500      	movne	r5, #0
 80039fe:	4293      	cmp	r3, r2
 8003a00:	bfc4      	itt	gt
 8003a02:	1a9b      	subgt	r3, r3, r2
 8003a04:	18ed      	addgt	r5, r5, r3
 8003a06:	2600      	movs	r6, #0
 8003a08:	341a      	adds	r4, #26
 8003a0a:	42b5      	cmp	r5, r6
 8003a0c:	d11a      	bne.n	8003a44 <_printf_common+0xc8>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e008      	b.n	8003a24 <_printf_common+0xa8>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4652      	mov	r2, sl
 8003a16:	4641      	mov	r1, r8
 8003a18:	4638      	mov	r0, r7
 8003a1a:	47c8      	blx	r9
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d103      	bne.n	8003a28 <_printf_common+0xac>
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7c6      	b.n	80039ba <_printf_common+0x3e>
 8003a2c:	18e1      	adds	r1, r4, r3
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	2030      	movs	r0, #48	@ 0x30
 8003a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a36:	4422      	add	r2, r4
 8003a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a40:	3302      	adds	r3, #2
 8003a42:	e7c7      	b.n	80039d4 <_printf_common+0x58>
 8003a44:	2301      	movs	r3, #1
 8003a46:	4622      	mov	r2, r4
 8003a48:	4641      	mov	r1, r8
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	47c8      	blx	r9
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d0e6      	beq.n	8003a20 <_printf_common+0xa4>
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7d9      	b.n	8003a0a <_printf_common+0x8e>
	...

08003a58 <_printf_i>:
 8003a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	7e0f      	ldrb	r7, [r1, #24]
 8003a5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a60:	2f78      	cmp	r7, #120	@ 0x78
 8003a62:	4691      	mov	r9, r2
 8003a64:	4680      	mov	r8, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	469a      	mov	sl, r3
 8003a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a6e:	d807      	bhi.n	8003a80 <_printf_i+0x28>
 8003a70:	2f62      	cmp	r7, #98	@ 0x62
 8003a72:	d80a      	bhi.n	8003a8a <_printf_i+0x32>
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	f000 80d2 	beq.w	8003c1e <_printf_i+0x1c6>
 8003a7a:	2f58      	cmp	r7, #88	@ 0x58
 8003a7c:	f000 80b9 	beq.w	8003bf2 <_printf_i+0x19a>
 8003a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a88:	e03a      	b.n	8003b00 <_printf_i+0xa8>
 8003a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a8e:	2b15      	cmp	r3, #21
 8003a90:	d8f6      	bhi.n	8003a80 <_printf_i+0x28>
 8003a92:	a101      	add	r1, pc, #4	@ (adr r1, 8003a98 <_printf_i+0x40>)
 8003a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003b05 	.word	0x08003b05
 8003aa0:	08003a81 	.word	0x08003a81
 8003aa4:	08003a81 	.word	0x08003a81
 8003aa8:	08003a81 	.word	0x08003a81
 8003aac:	08003a81 	.word	0x08003a81
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003a81 	.word	0x08003a81
 8003ab8:	08003a81 	.word	0x08003a81
 8003abc:	08003a81 	.word	0x08003a81
 8003ac0:	08003a81 	.word	0x08003a81
 8003ac4:	08003c05 	.word	0x08003c05
 8003ac8:	08003b2f 	.word	0x08003b2f
 8003acc:	08003bbf 	.word	0x08003bbf
 8003ad0:	08003a81 	.word	0x08003a81
 8003ad4:	08003a81 	.word	0x08003a81
 8003ad8:	08003c27 	.word	0x08003c27
 8003adc:	08003a81 	.word	0x08003a81
 8003ae0:	08003b2f 	.word	0x08003b2f
 8003ae4:	08003a81 	.word	0x08003a81
 8003ae8:	08003a81 	.word	0x08003a81
 8003aec:	08003bc7 	.word	0x08003bc7
 8003af0:	6833      	ldr	r3, [r6, #0]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6032      	str	r2, [r6, #0]
 8003af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b00:	2301      	movs	r3, #1
 8003b02:	e09d      	b.n	8003c40 <_printf_i+0x1e8>
 8003b04:	6833      	ldr	r3, [r6, #0]
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	1d19      	adds	r1, r3, #4
 8003b0a:	6031      	str	r1, [r6, #0]
 8003b0c:	0606      	lsls	r6, r0, #24
 8003b0e:	d501      	bpl.n	8003b14 <_printf_i+0xbc>
 8003b10:	681d      	ldr	r5, [r3, #0]
 8003b12:	e003      	b.n	8003b1c <_printf_i+0xc4>
 8003b14:	0645      	lsls	r5, r0, #25
 8003b16:	d5fb      	bpl.n	8003b10 <_printf_i+0xb8>
 8003b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b1c:	2d00      	cmp	r5, #0
 8003b1e:	da03      	bge.n	8003b28 <_printf_i+0xd0>
 8003b20:	232d      	movs	r3, #45	@ 0x2d
 8003b22:	426d      	negs	r5, r5
 8003b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b28:	4859      	ldr	r0, [pc, #356]	@ (8003c90 <_printf_i+0x238>)
 8003b2a:	230a      	movs	r3, #10
 8003b2c:	e011      	b.n	8003b52 <_printf_i+0xfa>
 8003b2e:	6821      	ldr	r1, [r4, #0]
 8003b30:	6833      	ldr	r3, [r6, #0]
 8003b32:	0608      	lsls	r0, r1, #24
 8003b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b38:	d402      	bmi.n	8003b40 <_printf_i+0xe8>
 8003b3a:	0649      	lsls	r1, r1, #25
 8003b3c:	bf48      	it	mi
 8003b3e:	b2ad      	uxthmi	r5, r5
 8003b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b42:	4853      	ldr	r0, [pc, #332]	@ (8003c90 <_printf_i+0x238>)
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	bf14      	ite	ne
 8003b48:	230a      	movne	r3, #10
 8003b4a:	2308      	moveq	r3, #8
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b52:	6866      	ldr	r6, [r4, #4]
 8003b54:	60a6      	str	r6, [r4, #8]
 8003b56:	2e00      	cmp	r6, #0
 8003b58:	bfa2      	ittt	ge
 8003b5a:	6821      	ldrge	r1, [r4, #0]
 8003b5c:	f021 0104 	bicge.w	r1, r1, #4
 8003b60:	6021      	strge	r1, [r4, #0]
 8003b62:	b90d      	cbnz	r5, 8003b68 <_printf_i+0x110>
 8003b64:	2e00      	cmp	r6, #0
 8003b66:	d04b      	beq.n	8003c00 <_printf_i+0x1a8>
 8003b68:	4616      	mov	r6, r2
 8003b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8003b72:	5dc7      	ldrb	r7, [r0, r7]
 8003b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b78:	462f      	mov	r7, r5
 8003b7a:	42bb      	cmp	r3, r7
 8003b7c:	460d      	mov	r5, r1
 8003b7e:	d9f4      	bls.n	8003b6a <_printf_i+0x112>
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d10b      	bne.n	8003b9c <_printf_i+0x144>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	07df      	lsls	r7, r3, #31
 8003b88:	d508      	bpl.n	8003b9c <_printf_i+0x144>
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	6861      	ldr	r1, [r4, #4]
 8003b8e:	4299      	cmp	r1, r3
 8003b90:	bfde      	ittt	le
 8003b92:	2330      	movle	r3, #48	@ 0x30
 8003b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b9c:	1b92      	subs	r2, r2, r6
 8003b9e:	6122      	str	r2, [r4, #16]
 8003ba0:	f8cd a000 	str.w	sl, [sp]
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	aa03      	add	r2, sp, #12
 8003ba8:	4621      	mov	r1, r4
 8003baa:	4640      	mov	r0, r8
 8003bac:	f7ff fee6 	bl	800397c <_printf_common>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d14a      	bne.n	8003c4a <_printf_i+0x1f2>
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	b004      	add	sp, #16
 8003bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	f043 0320 	orr.w	r3, r3, #32
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	4833      	ldr	r0, [pc, #204]	@ (8003c94 <_printf_i+0x23c>)
 8003bc8:	2778      	movs	r7, #120	@ 0x78
 8003bca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	6831      	ldr	r1, [r6, #0]
 8003bd2:	061f      	lsls	r7, r3, #24
 8003bd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bd8:	d402      	bmi.n	8003be0 <_printf_i+0x188>
 8003bda:	065f      	lsls	r7, r3, #25
 8003bdc:	bf48      	it	mi
 8003bde:	b2ad      	uxthmi	r5, r5
 8003be0:	6031      	str	r1, [r6, #0]
 8003be2:	07d9      	lsls	r1, r3, #31
 8003be4:	bf44      	itt	mi
 8003be6:	f043 0320 	orrmi.w	r3, r3, #32
 8003bea:	6023      	strmi	r3, [r4, #0]
 8003bec:	b11d      	cbz	r5, 8003bf6 <_printf_i+0x19e>
 8003bee:	2310      	movs	r3, #16
 8003bf0:	e7ac      	b.n	8003b4c <_printf_i+0xf4>
 8003bf2:	4827      	ldr	r0, [pc, #156]	@ (8003c90 <_printf_i+0x238>)
 8003bf4:	e7e9      	b.n	8003bca <_printf_i+0x172>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f023 0320 	bic.w	r3, r3, #32
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	e7f6      	b.n	8003bee <_printf_i+0x196>
 8003c00:	4616      	mov	r6, r2
 8003c02:	e7bd      	b.n	8003b80 <_printf_i+0x128>
 8003c04:	6833      	ldr	r3, [r6, #0]
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	6961      	ldr	r1, [r4, #20]
 8003c0a:	1d18      	adds	r0, r3, #4
 8003c0c:	6030      	str	r0, [r6, #0]
 8003c0e:	062e      	lsls	r6, r5, #24
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	d501      	bpl.n	8003c18 <_printf_i+0x1c0>
 8003c14:	6019      	str	r1, [r3, #0]
 8003c16:	e002      	b.n	8003c1e <_printf_i+0x1c6>
 8003c18:	0668      	lsls	r0, r5, #25
 8003c1a:	d5fb      	bpl.n	8003c14 <_printf_i+0x1bc>
 8003c1c:	8019      	strh	r1, [r3, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6123      	str	r3, [r4, #16]
 8003c22:	4616      	mov	r6, r2
 8003c24:	e7bc      	b.n	8003ba0 <_printf_i+0x148>
 8003c26:	6833      	ldr	r3, [r6, #0]
 8003c28:	1d1a      	adds	r2, r3, #4
 8003c2a:	6032      	str	r2, [r6, #0]
 8003c2c:	681e      	ldr	r6, [r3, #0]
 8003c2e:	6862      	ldr	r2, [r4, #4]
 8003c30:	2100      	movs	r1, #0
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7fc fad4 	bl	80001e0 <memchr>
 8003c38:	b108      	cbz	r0, 8003c3e <_printf_i+0x1e6>
 8003c3a:	1b80      	subs	r0, r0, r6
 8003c3c:	6060      	str	r0, [r4, #4]
 8003c3e:	6863      	ldr	r3, [r4, #4]
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	2300      	movs	r3, #0
 8003c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c48:	e7aa      	b.n	8003ba0 <_printf_i+0x148>
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	4649      	mov	r1, r9
 8003c50:	4640      	mov	r0, r8
 8003c52:	47d0      	blx	sl
 8003c54:	3001      	adds	r0, #1
 8003c56:	d0ad      	beq.n	8003bb4 <_printf_i+0x15c>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	079b      	lsls	r3, r3, #30
 8003c5c:	d413      	bmi.n	8003c86 <_printf_i+0x22e>
 8003c5e:	68e0      	ldr	r0, [r4, #12]
 8003c60:	9b03      	ldr	r3, [sp, #12]
 8003c62:	4298      	cmp	r0, r3
 8003c64:	bfb8      	it	lt
 8003c66:	4618      	movlt	r0, r3
 8003c68:	e7a6      	b.n	8003bb8 <_printf_i+0x160>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4632      	mov	r2, r6
 8003c6e:	4649      	mov	r1, r9
 8003c70:	4640      	mov	r0, r8
 8003c72:	47d0      	blx	sl
 8003c74:	3001      	adds	r0, #1
 8003c76:	d09d      	beq.n	8003bb4 <_printf_i+0x15c>
 8003c78:	3501      	adds	r5, #1
 8003c7a:	68e3      	ldr	r3, [r4, #12]
 8003c7c:	9903      	ldr	r1, [sp, #12]
 8003c7e:	1a5b      	subs	r3, r3, r1
 8003c80:	42ab      	cmp	r3, r5
 8003c82:	dcf2      	bgt.n	8003c6a <_printf_i+0x212>
 8003c84:	e7eb      	b.n	8003c5e <_printf_i+0x206>
 8003c86:	2500      	movs	r5, #0
 8003c88:	f104 0619 	add.w	r6, r4, #25
 8003c8c:	e7f5      	b.n	8003c7a <_printf_i+0x222>
 8003c8e:	bf00      	nop
 8003c90:	08003dcd 	.word	0x08003dcd
 8003c94:	08003dde 	.word	0x08003dde

08003c98 <memmove>:
 8003c98:	4288      	cmp	r0, r1
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	eb01 0402 	add.w	r4, r1, r2
 8003ca0:	d902      	bls.n	8003ca8 <memmove+0x10>
 8003ca2:	4284      	cmp	r4, r0
 8003ca4:	4623      	mov	r3, r4
 8003ca6:	d807      	bhi.n	8003cb8 <memmove+0x20>
 8003ca8:	1e43      	subs	r3, r0, #1
 8003caa:	42a1      	cmp	r1, r4
 8003cac:	d008      	beq.n	8003cc0 <memmove+0x28>
 8003cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cb6:	e7f8      	b.n	8003caa <memmove+0x12>
 8003cb8:	4402      	add	r2, r0
 8003cba:	4601      	mov	r1, r0
 8003cbc:	428a      	cmp	r2, r1
 8003cbe:	d100      	bne.n	8003cc2 <memmove+0x2a>
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cca:	e7f7      	b.n	8003cbc <memmove+0x24>

08003ccc <_sbrk_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4d06      	ldr	r5, [pc, #24]	@ (8003ce8 <_sbrk_r+0x1c>)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	602b      	str	r3, [r5, #0]
 8003cd8:	f7fd fbe0 	bl	800149c <_sbrk>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d102      	bne.n	8003ce6 <_sbrk_r+0x1a>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	b103      	cbz	r3, 8003ce6 <_sbrk_r+0x1a>
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	20000268 	.word	0x20000268

08003cec <memcpy>:
 8003cec:	440a      	add	r2, r1
 8003cee:	4291      	cmp	r1, r2
 8003cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cf4:	d100      	bne.n	8003cf8 <memcpy+0xc>
 8003cf6:	4770      	bx	lr
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d02:	4291      	cmp	r1, r2
 8003d04:	d1f9      	bne.n	8003cfa <memcpy+0xe>
 8003d06:	bd10      	pop	{r4, pc}

08003d08 <_realloc_r>:
 8003d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0c:	4680      	mov	r8, r0
 8003d0e:	4615      	mov	r5, r2
 8003d10:	460c      	mov	r4, r1
 8003d12:	b921      	cbnz	r1, 8003d1e <_realloc_r+0x16>
 8003d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d18:	4611      	mov	r1, r2
 8003d1a:	f7ff bc4b 	b.w	80035b4 <_malloc_r>
 8003d1e:	b92a      	cbnz	r2, 8003d2c <_realloc_r+0x24>
 8003d20:	f7ff fbdc 	bl	80034dc <_free_r>
 8003d24:	2400      	movs	r4, #0
 8003d26:	4620      	mov	r0, r4
 8003d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d2c:	f000 f81a 	bl	8003d64 <_malloc_usable_size_r>
 8003d30:	4285      	cmp	r5, r0
 8003d32:	4606      	mov	r6, r0
 8003d34:	d802      	bhi.n	8003d3c <_realloc_r+0x34>
 8003d36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d3a:	d8f4      	bhi.n	8003d26 <_realloc_r+0x1e>
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4640      	mov	r0, r8
 8003d40:	f7ff fc38 	bl	80035b4 <_malloc_r>
 8003d44:	4607      	mov	r7, r0
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d0ec      	beq.n	8003d24 <_realloc_r+0x1c>
 8003d4a:	42b5      	cmp	r5, r6
 8003d4c:	462a      	mov	r2, r5
 8003d4e:	4621      	mov	r1, r4
 8003d50:	bf28      	it	cs
 8003d52:	4632      	movcs	r2, r6
 8003d54:	f7ff ffca 	bl	8003cec <memcpy>
 8003d58:	4621      	mov	r1, r4
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	f7ff fbbe 	bl	80034dc <_free_r>
 8003d60:	463c      	mov	r4, r7
 8003d62:	e7e0      	b.n	8003d26 <_realloc_r+0x1e>

08003d64 <_malloc_usable_size_r>:
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f18      	subs	r0, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfbc      	itt	lt
 8003d6e:	580b      	ldrlt	r3, [r1, r0]
 8003d70:	18c0      	addlt	r0, r0, r3
 8003d72:	4770      	bx	lr

08003d74 <_init>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr

08003d80 <_fini>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	bf00      	nop
 8003d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d86:	bc08      	pop	{r3}
 8003d88:	469e      	mov	lr, r3
 8003d8a:	4770      	bx	lr
